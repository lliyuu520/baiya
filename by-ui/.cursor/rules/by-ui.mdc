---
description: 
globs: 
alwaysApply: true
---
# BY-UI 项目文档

## 项目概述
BY-UI 是一个基于 Vue 3 + TypeScript + Vite 开发的现代化前端项目，采用 Element Plus 作为 UI 组件库，集成了多个实用的功能模块。

## 技术栈
- **核心框架**：Vue 3.2.47
- **构建工具**：Vite 6.2.6
- **UI 框架**：Element Plus 2.9.8
- **状态管理**：Pinia 2.0.30
- **路由管理**：Vue Router 4.1.5
- **HTTP 客户端**：Axios 1.8.2
- **工具库**：
  - VueUse 9.1.1
  - Moment.js 2.29.4
  - VXE-Table 4.7.0
  - SortableJS 1.15.0
- **开发语言**：TypeScript 4.7.4
- **CSS 预处理器**：Sass 1.58.0

## 项目结构
```
by-ui/
├── src/
│   ├── api/          # API 接口定义
│   ├── assets/       # 静态资源
│   ├── components/   # 公共组件
│   ├── config/       # 配置文件
│   ├── hooks/        # 自定义 Hooks
│   ├── icons/        # 图标资源
│   ├── layout/       # 布局组件
│   ├── router/       # 路由配置
│   ├── store/        # 状态管理
│   ├── styles/       # 全局样式
│   ├── types/        # TypeScript 类型定义
│   ├── utils/        # 工具函数
│   ├── views/        # 页面组件
│   ├── App.vue       # 根组件
│   └── main.ts       # 入口文件
├── public/           # 公共资源
├── index.html        # HTML 模板
├── vite.config.ts    # Vite 配置
├── tsconfig.json     # TypeScript 配置
├── package.json      # 项目依赖
└── yarn.lock         # 依赖版本锁定
```

## 开发环境要求
- Node.js：16.x 或更高版本
- 包管理器：Yarn 或 npm
- 浏览器：支持 ES6+ 的现代浏览器
- 操作系统：支持 Windows/Linux/MacOS

## 构建与运行
1. 安装依赖：
   ```bash
   yarn install
   # 或
   npm install
   ```

2. 开发环境运行：
   ```bash
   yarn dev
   # 或
   npm run dev
   ```

3. 生产环境构建：
   ```bash
   yarn build
   # 或
   npm run build
   ```

## 项目配置说明

### Vite 配置
- 开发服务器端口：3000
- 自动打开浏览器：是
- 基础路径："./"
- 别名配置：
  - "@": "./src"

### 全局组件
项目注册了以下全局组件：
- SvgIcon：SVG 图标组件
- FastTableColumn：表格列组件
- FastRadioGroup：单选组件
- FastSelect：选择器组件
- FastUser：用户组件

### 状态管理
使用 Pinia 进行状态管理，主要模块：
- 用户状态
- 应用配置
- 权限管理

### 路由配置
- 基于 Vue Router 4.x
- 支持动态路由
- 集成权限控制

### 样式管理
- 使用 SCSS 预处理器
- 支持主题定制
- 集成 Element Plus 样式
## 注意事项
1. 开发时请遵循项目的代码规范
2. 提交代码前请运行代码格式化
3. 注意 TypeScript 类型定义
4. 保持依赖版本的更新
5. 遵循 Vue 3 组合式 API 的最佳实践
6. 注意组件的性能优化
7. 保持代码的可维护性和可测试性

## 开发规范
1. 使用 TypeScript 进行开发
2. 遵循 ESLint 和 Prettier 的代码规范
3. 组件命名采用 PascalCase
4. 文件命名采用 kebab-case
5. 使用组合式 API 编写组件
6. 保持代码注释的完整性
7. 遵循 Git 提交规范
